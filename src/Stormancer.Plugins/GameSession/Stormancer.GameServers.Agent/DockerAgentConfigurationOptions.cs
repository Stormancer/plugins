using Stormancer.Server.Plugins.GameSession.ServerProviders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Stormancer.GameServers.Agent
{
  
    public class DockerAgentConfigurationOptions
    {
        public static string Section => "agent";
        public string? PublicIp { get; set; }

        public int MinPort { get; set; } = 40000;
        public int MaxPort { get; set; } = 40999;

        public int HttpPort { get; set; } = 30001;
        public long MaxMemory { get; set; }
        public float MaxCpu { get; set; }

        /// <summary>
        /// gets or sets the name of the agent.
        /// </summary>
        public string Name { get; set; } = Environment.MachineName;

        /// <summary>
        /// Gets or sets the path to the private key used to authentify the agent to applications.
        /// </summary>
        public string? PrivateKeyPath { get; set; }

        /// <summary>
        /// Gets or sets the password of the private key.
        /// </summary>
        public string? PrivateKeyPassword { get; set; }

        /// <summary>
        /// Gets or sets the path to memory dumps generated by containers on crash.
        /// </summary>
        public string? CorePath { get; set; }

        /// <summary>
        /// Gets or sets the region of the agent.
        /// </summary>
        public string? Region { get; set; }

        /// <summary>
        /// Gets or sets the list of applications the agent must advertises itself to.
        /// </summary>
        public Dictionary<string, ApplicationConfigurationOptions> Applications { get; set; } = new Dictionary<string, ApplicationConfigurationOptions>();

        /// <summary>
        /// Gets or sets the optional list of attributes advertised to applications.
        /// </summary>
        public Dictionary<string, string> Attributes { get; set; } = new Dictionary<string, string>();


        /// <summary>
        /// Validates the configuration.
        /// </summary>
        /// <returns></returns>
        public ConfigurationValidationModel Validate()
        {
            var model = new ConfigurationValidationModel();
            model.Success = true;


            return model;


        }
        /// <summary>
        /// Gets or sets the audience of JWT tokens.
        /// </summary>
        public string? Audience { get; set; }

        /// <summary>
        /// Gets or sets the authority for JWT tokens.
        /// </summary>
        public string? Authority { get; set; }

    }


}
